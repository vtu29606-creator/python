{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOYA6MX6zAltrkOfq4FsD8w",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vtu29606-creator/python/blob/main/Task-7\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JC83A0trUoqy"
      },
      "outputs": [],
      "source": [
        "def analyze_student_grades():\n",
        "    # Sample data\n",
        "    student_names = [\"Alice\", \"Bob\", \"Charlie\", \"Diana\"]\n",
        "    student_grades = [85, 92, 78, 90]\n",
        "\n",
        "    # 1. Print a welcome message\n",
        "    print(\"Welcome to the Student Grades Analyzer!\\n\")\n",
        "\n",
        "    # 2. Determine and print the number of students\n",
        "    num_students = len(student_names)\n",
        "    print(\"Number of students:\", num_students)\n",
        "\n",
        "    # 3. Print the type of the student names list and the grades list\n",
        "    print(\"\\nType of student_names list:\", type(student_names))\n",
        "    print(\"Type of student_grades list:\", type(student_grades))\n",
        "\n",
        "    # 4. Find and print the highest and lowest grade\n",
        "    highest_grade = max(student_grades)\n",
        "    lowest_grade = min(student_grades)\n",
        "    print(\"\\nHighest grade:\", highest_grade)\n",
        "    print(\"Lowest grade:\", lowest_grade)\n",
        "\n",
        "    # 5. Print the list of grades sorted in ascending order\n",
        "    sorted_grades = sorted(student_grades)\n",
        "    print(\"\\nSorted grades:\", sorted_grades)\n",
        "\n",
        "    # 6. Print the list of grades in reverse order\n",
        "    reversed_grades = list(reversed(sorted_grades))\n",
        "    print(\"Reversed grades:\", reversed_grades)\n",
        "\n",
        "    # 7. Generate and print a range of grade indices from 1 to the number of students\n",
        "    grade_indices = list(range(1, num_students + 1))\n",
        "    print(\"\\nGrade indices from 1 to number of students:\", grade_indices)\n",
        "\n",
        "# Run the analysis\n",
        "analyze_student_grades()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def add(a, b):\n",
        "        return a + b\n",
        "def subtract(a, b):\n",
        "    return a - b\n",
        "multiply = lambda a, b: a * b\n",
        "divide = lambda a, b: a / b if b != 0 else \"Error: Division by zero\"\n",
        "\n",
        "# Regular function for greeting\n",
        "greet = lambda name: f\"Hello, {name}! Welcome to the program.\"\n",
        "\n",
        "def main():\n",
        "    # Demonstrating the use of lambda functions\n",
        "    num1 = int(input(\"enter num1:\"))\n",
        "    num2 = int(input(\"enter num2:\"))\n",
        "\n",
        "    print(\"Arithmetic Operations:\")\n",
        "    print(\"Sum of\", num1, \"and\", num2, \":\", add(num1, num2))\n",
        "    diff=subtract(num1, num2)\n",
        "    print(\"Difference between\", num1, \"and\", num2, \":\", diff)\n",
        "    if diff< 0:\n",
        "        print(\"The difference is negative!\")\n",
        "    elif diff==0:\n",
        "        print(\"The difference is Zero!\")\n",
        "    else:\n",
        "        print(\"The difference is Positive!\")\n",
        "\n",
        "    print(\"Product of\", num1, \"and\", num2, \":\", multiply(num1, num2))\n",
        "    print(\"Quotient of\", num1, \"and\", num2, \":\", divide(num1, num2))\n",
        "    # Greeting the user\n",
        "    user_name = \"Alice\"\n",
        "    print(\"\\nGreeting:\")\n",
        "    print(greet(user_name))\n",
        "\n",
        "# Run the main function\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "FzZ1asciUr0s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Recursive function to reverse a string\n",
        "def reverse_string(s):\n",
        "    if len(s) == 0:   # base case\n",
        "        return s\n",
        "    return reverse_string(s[1:]) + s[0]\n",
        "\n",
        "# Test cases\n",
        "print(\"Reverse of 'hello' =\", reverse_string(\"hello\"))\n",
        "print(\"Reverse of 'python' =\", reverse_string(\"python\"))\n",
        "print(\"Reverse of 'recursion' =\", reverse_string(\"recursion\"))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3kiN3lZ6UvSA",
        "outputId": "5fe23e14-b3d8-4f7c-81ee-ef6be38f12ce"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reverse of 'hello' = olleh\n",
            "Reverse of 'python' = nohtyp\n",
            "Reverse of 'recursion' = noisrucer\n"
          ]
        }
      ]
    }
  ]
}