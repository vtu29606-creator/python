{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMbPNIOIb5jyhkYtDfeRDGo",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vtu29606-creator/python/blob/main/Task-11\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "KuGA0XTdV5Jl",
        "outputId": "0addfb10-277d-418a-e825-393a019e388f"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TclError",
          "evalue": "no display name and no $DISPLAY environment variable",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTclError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3479963008.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Create the main window\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mroot\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTk\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mroot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"My First Tkinter App\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mroot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeometry\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"300x200\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.12/tkinter/__init__.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, screenName, baseName, className, useTk, sync, use)\u001b[0m\n\u001b[1;32m   2347\u001b[0m                 \u001b[0mbaseName\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbaseName\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2348\u001b[0m         \u001b[0minteractive\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2349\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_tkinter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscreenName\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbaseName\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassName\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minteractive\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwantobjects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0museTk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msync\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2350\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0m_debug\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2351\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msettrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_print_command\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTclError\u001b[0m: no display name and no $DISPLAY environment variable"
          ]
        }
      ],
      "source": [
        "import tkinter as tk\n",
        "\n",
        "# Create the main window\n",
        "root = tk.Tk()\n",
        "root.title(\"My First Tkinter App\")\n",
        "root.geometry(\"300x200\")\n",
        "\n",
        "# Create a Label\n",
        "label = tk.Label(root, text=\"Enter your name:\")\n",
        "label.pack(pady=10)\n",
        "\n",
        "# Create an Entry box\n",
        "entry = tk.Entry(root)\n",
        "entry.pack(pady=5)\n",
        "\n",
        "# Function to display message\n",
        "def show_message():\n",
        "    name = entry.get()\n",
        "    message_label.config(text=\"Hello, \" + name + \"!\")\n",
        "\n",
        "# Create a Button\n",
        "button = tk.Button(root, text=\"Submit\", command=show_message)\n",
        "button.pack(pady=10)\n",
        "\n",
        "# Label to display output\n",
        "message_label = tk.Label(root, text=\"\")\n",
        "message_label.pack(pady=10)\n",
        "\n",
        "# Run the window\n",
        "root.mainloop()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tkinter as tk\n",
        "\n",
        "def add():\n",
        "    try:\n",
        "        result = float(num1_entry.get()) + float(num2_entry.get())\n",
        "        result_label.config(text=f\"Result: {result}\")\n",
        "    except ValueError:\n",
        "        result_label.config(text=\"Please enter valid numbers!\")\n",
        "\n",
        "def subtract():\n",
        "    try:\n",
        "        result = float(num1_entry.get()) - float(num2_entry.get())\n",
        "        result_label.config(text=f\"Result: {result}\")\n",
        "    except ValueError:\n",
        "        result_label.config(text=\"Please enter valid numbers!\")\n",
        "\n",
        "def multiply():\n",
        "    try:\n",
        "        result = float(num1_entry.get()) * float(num2_entry.get())\n",
        "        result_label.config(text=f\"Result: {result}\")\n",
        "    except ValueError:\n",
        "        result_label.config(text=\"Please enter valid numbers!\")\n",
        "\n",
        "def divide():\n",
        "    try:\n",
        "        num1 = float(num1_entry.get())\n",
        "        num2 = float(num2_entry.get())\n",
        "        if num2 == 0:\n",
        "            result_label.config(text=\"Cannot divide by zero!\")\n",
        "        else:\n",
        "            result = num1 / num2\n",
        "            result_label.config(text=f\"Result: {result:.2f}\")\n",
        "    except ValueError:\n",
        "        result_label.config(text=\"Please enter valid numbers!\")\n",
        "\n",
        "# Create main window\n",
        "root = tk.Tk()\n",
        "root.title(\"Basic Calculator\")\n",
        "\n",
        "# Input fields\n",
        "tk.Label(root, text=\"Enter first number:\").pack()\n",
        "num1_entry = tk.Entry(root)\n",
        "num1_entry.pack()\n",
        "\n",
        "tk.Label(root, text=\"Enter second number:\").pack()\n",
        "num2_entry = tk.Entry(root)\n",
        "num2_entry.pack()\n",
        "\n",
        "# Operation buttons\n",
        "tk.Button(root, text=\"Add (+)\", bg=\"lightgreen\", command=add).pack(pady=2)\n",
        "tk.Button(root, text=\"Subtract (-)\", bg=\"lightblue\", command=subtract).pack(pady=2)\n",
        "tk.Button(root, text=\"Multiply (ร)\", bg=\"orange\", command=multiply).pack(pady=2)\n",
        "tk.Button(root, text=\"Divide (รท)\", bg=\"pink\", command=divide).pack(pady=2)\n",
        "\n",
        "# Result label\n",
        "result_label = tk.Label(root, text=\"\", font=(\"Arial\", 12, \"bold\"))\n",
        "result_label.pack(pady=10)\n",
        "\n",
        "root.mainloop()"
      ],
      "metadata": {
        "id": "-Ponp0YOWCu0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}