{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMljMUCH/YsaP/ZZiLxKrv5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vtu29606-creator/python/blob/main/Task-12\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "oAvEqxXzWWw7",
        "outputId": "2f0cd95c-a335-4103-cc20-27e0fc26a264"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-123453437.py, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-123453437.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    mport pygame\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "mport pygame\n",
        "import time\n",
        "import random\n",
        "\n",
        "# Snake speed and window size\n",
        "snake_speed = 15\n",
        "window_x, window_y = 720, 480\n",
        "\n",
        "# Colors\n",
        "black = pygame.Color(0,0,0)\n",
        "white = pygame.Color(255,255,255)\n",
        "red = pygame.Color(255,0,0)\n",
        "green = pygame.Color(0,255,0)\n",
        "\n",
        "# Initialize pygame\n",
        "pygame.init()\n",
        "game_window = pygame.display.set_mode((window_x, window_y))\n",
        "pygame.display.set_caption('Snake Game')\n",
        "fps = pygame.time.Clock()\n",
        "\n",
        "# Snake and fruit initialization\n",
        "snake_position = [100,50]\n",
        "snake_body = [[100,50],[90,50],[80,50],[70,50]]\n",
        "fruit_position = [random.randrange(1, (window_x//10))*10, random.randrange(1,(window_y//10))*10]\n",
        "fruit_spawn = True\n",
        "direction = 'RIGHT'\n",
        "change_to = direction\n",
        "score = 0\n",
        "\n",
        "# Display score\n",
        "def show_score(choice, color, font, size):\n",
        "    score_font = pygame.font.SysFont(font, size)\n",
        "    score_surface = score_font.render('Score : '+str(score), True, color)\n",
        "    score_rect = score_surface.get_rect()\n",
        "    game_window.blit(score_surface, score_rect)\n",
        "\n",
        "# Game over\n",
        "def game_over():\n",
        "    my_font = pygame.font.SysFont('times new roman', 50)\n",
        "    game_over_surface = my_font.render('Your Score : '+str(score), True, red)\n",
        "    game_over_rect = game_over_surface.get_rect()\n",
        "    game_over_rect.midtop = (window_x/2, window_y/4)\n",
        "    game_window.blit(game_over_surface, game_over_rect)\n",
        "    pygame.display.flip()\n",
        "    time.sleep(2)\n",
        "    pygame.quit()\n",
        "    quit()\n",
        "\n",
        "# Main game loop\n",
        "while True:\n",
        "    for event in pygame.event.get():\n",
        "        if event.type == pygame.KEYDOWN:\n",
        "            if event.key == pygame.K_UP: change_to='UP'\n",
        "            if event.key == pygame.K_DOWN: change_to='DOWN'\n",
        "            if event.key == pygame.K_LEFT: change_to='LEFT'\n",
        "            if event.key == pygame.K_RIGHT: change_to='RIGHT'\n",
        "\n",
        "    # Prevent reverse direction\n",
        "    if change_to=='UP' and direction!='DOWN': direction='UP'\n",
        "    if change_to=='DOWN' and direction!='UP': direction='DOWN'\n",
        "    if change_to=='LEFT' and direction!='RIGHT': direction='LEFT'\n",
        "    if change_to=='RIGHT' and direction!='LEFT': direction='RIGHT'\n",
        "\n",
        "    # Move snake\n",
        "    if direction=='UP': snake_position[1]-=10\n",
        "    if direction=='DOWN': snake_position[1]+=10\n",
        "    if direction=='LEFT': snake_position[0]-=10\n",
        "    if direction=='RIGHT': snake_position[0]+=10\n",
        "\n",
        "    # Snake body growing\n",
        "    snake_body.insert(0, list(snake_position))\n",
        "    if snake_position[0]==fruit_position[0] and snake_position[1]==fruit_position[1]:\n",
        "        score+=10\n",
        "        fruit_spawn=False\n",
        "    else:\n",
        "        snake_body.pop()\n",
        "    if not fruit_spawn:\n",
        "        fruit_position=[random.randrange(1,(window_x//10))*10, random.randrange(1,(window_y//10))*10]\n",
        "    fruit_spawn=True\n",
        "\n",
        "    game_window.fill(black)\n",
        "    for pos in snake_body:\n",
        "        pygame.draw.rect(game_window, green, pygame.Rect(pos[0], pos[1], 10,10))\n",
        "    pygame.draw.rect(game_window, white, pygame.Rect(fruit_position[0], fruit_position[1],10,10))\n",
        "\n",
        "    # Game Over conditions\n",
        "    if snake_position[0]<0 or snake_position[0]>window_x-10 or snake_position[1]<0 or snake_position[1]>window_y-10:\n",
        "        game_over()\n",
        "    for block in snake_body[1:]:\n",
        "        if snake_position[0]==block[0] and snake_position[1]==block[1]:\n",
        "            game_over()\n",
        "\n",
        "    show_score(1, white, 'times new roman', 20)\n",
        "    pygame.display.update()\n",
        "    fps.tick(snake_speed)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pygame\n",
        "\n",
        "pygame.init()\n",
        "screen_size = (640,640)\n",
        "screen = pygame.display.set_mode(screen_size)\n",
        "pygame.display.set_caption('Chess Board')\n",
        "\n",
        "# Colors\n",
        "white = (255,255,255)\n",
        "brown = (153,76,0)\n",
        "\n",
        "# Draw board\n",
        "def draw_board():\n",
        "    for row in range(8):\n",
        "        for col in range(8):\n",
        "            color = white if (row+col)%2==0 else brown\n",
        "            pygame.draw.rect(screen, color, pygame.Rect(col*80, row*80, 80,80))\n",
        "\n",
        "# Draw pieces\n",
        "def draw_pieces(board):\n",
        "    SQUARE_SIZE=80\n",
        "    piece_images = {\n",
        "        'p': pygame.transform.scale(pygame.image.load('pawn.png'), (SQUARE_SIZE,SQUARE_SIZE)),\n",
        "        'r': pygame.transform.scale(pygame.image.load('rook.jpg'), (SQUARE_SIZE,SQUARE_SIZE)),\n",
        "        'n': pygame.transform.scale(pygame.image.load('knight.png'), (SQUARE_SIZE,SQUARE_SIZE)),\n",
        "        'b': pygame.transform.scale(pygame.image.load('bishop.png'), (SQUARE_SIZE,SQUARE_SIZE)),\n",
        "        'q': pygame.transform.scale(pygame.image.load('queen.png'), (SQUARE_SIZE,SQUARE_SIZE)),\n",
        "        'k': pygame.transform.scale(pygame.image.load('king.png'), (SQUARE_SIZE,SQUARE_SIZE))\n",
        "    }\n",
        "    for row in range(8):\n",
        "        for col in range(8):\n",
        "            piece = board[row][col]\n",
        "            if piece != '.':\n",
        "                screen.blit(piece_images[piece], pygame.Rect(col*80,row*80,80,80))\n",
        "\n",
        "# Initial board state\n",
        "board = [\n",
        "    ['r','n','b','q','k','b','n','r'],\n",
        "    ['p','p','p','p','p','p','p','p'],\n",
        "    ['.','.','.','.','.','.','.','.'],\n",
        "    ['.','.','.','.','.','.','.','.'],\n",
        "    ['.','.','.','.','.','.','.','.'],\n",
        "    ['.','.','.','.','.','.','.','.'],\n",
        "    ['p','p','p','p','p','p','p','p'],\n",
        "    ['r','n','b','q','k','b','n','r']\n",
        "]\n",
        "\n",
        "draw_board()\n",
        "draw_pieces(board)\n",
        "\n",
        "while True:\n",
        "    for event in pygame.event.get():\n",
        "        if event.type==pygame.QUIT:\n",
        "            pygame.quit()\n",
        "            quit()\n",
        "    pygame.display.update()\n"
      ],
      "metadata": {
        "id": "4PKxp0Y1Wb2h"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}